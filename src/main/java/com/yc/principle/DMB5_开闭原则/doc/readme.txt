设计模式之开闭原则 （Composite Reuse Principle）

软件中的对象（类、模块、函数等）应该对于扩展是开放的，对于修改是封闭的

理解：
    a. 当需求发生变化时，尽量扩展实体的行为来变化，而不是通过修改已有的代码来实现变化；
    b. 低层模块的变化，必然有高层模块进行耦合，它并不意味着不做任何修改；
    c. 这个原则比较虚，可以通过具体的设计模式的设计思维去加深理解。


总结和注意事项

1. 开放-封闭原则是面向对象设计的核心所在，
2. 遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护，可扩展，可复用，灵活性好，
3. 开发人员应该仅对程序中呈现出来频繁变化的部分做抽象，
然而，对于应用程序中的每个部分都刻意进行抽象同样不是一个好主意，拒绝不成熟的抽象和抽象本身一样重要。