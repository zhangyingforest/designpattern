设计模式之依赖倒置原则（Dependence Inversion Principle）

高层模块不应该依赖低层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象

理解：
    a. 相对于细节的多变性，抽象的东西要稳定的多，以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。
        这里，抽象指的是接口或者抽象类，细节就是具体的实现类，
        使用抽象类或者接口的目的是，制定好规范和契约，不去涉及任何具体的操作，把展现细节的任务交给实现类来完成；
    b. 依赖倒置原则的核心思想是面向接口编程，达到解耦的过程。
注意：
    a. 底层模块尽量都要有抽象类或者接口；
    b. 变量的声明类型尽量是抽象类或接口；
    c. 使用继承时遵循里式替换原则, 即尽量不要覆写基类的方法，类间依赖的是抽象，覆写了抽象的方法会对依赖的稳定性造成一定影响。
    d. 依赖倒置要求编程时面向抽象或接口。这要求子类继承时尽量不要新增方法，否则按照依赖倒置原则编程根本访问不到子类新增的方法。


依赖关系传递的三种方式
1、接口传递
2、构造方法传递
3、setter 方式传递

总结和注意事项
1、低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.
2、变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化
3、继承时遵循里氏替换原则