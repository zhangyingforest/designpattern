接口隔离原则（Interface Segregation Principle）:  强调接口的高内聚和低耦合

客户端不应该依赖它不需要的接口 一个类对另一个类的依赖应该建立在最小的接口上面

理解：
    a. 建立单一接口，尽量细化接口，接口中的方法尽量少；
    b. 为单个类建立专用的接口，不要包含太多；
    c. 依赖几个专用的接口要比依赖一个综合的接口更灵活，提高系统的灵活性和可维护性。
注意：
    a. 接口尽量小，但是要有限度，过小则导致接口数量过多，设计复杂化；
    b. 为依赖接口的类定制服务，只暴露给调用类需要的方法，建立最小的依赖关系；
    c. 提高内聚，减少对外交互，用最少的方法去完成最多的事情。
和单一职责原则的对比：
    a. 单一职责原则注重的是职责，而接口隔离原则注重对接口依赖的隔离；
    b. 单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；
       而接口隔离原则主要约束接口，针对抽象和程序整体框架的构建。


总结和注意事项

采用接口隔离原则对接口进行约束时，要注意以下几点：
1、接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，
   但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
2、为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。
    只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
3、提高内聚，减少对外交互。高内聚就是提高接口，类和模块的处理能力，减少对外的交互。
    接口要尽量少的公布public方法，接口是对外的承诺，承诺的越少，对系统开发越有利，变更的风险就越少，同时有利于降低成本
4、运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。
   设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。